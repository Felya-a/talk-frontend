import { useEffect, useRef, useCallback, useState } from "react"
import freeice from "freeice"
import useStateWithCallback from "./useStateWithCallback"
import { useWebSocket } from "../socket/Context"
import { InputMessagesTypes, OutputMessagesTypes } from "../socket/interface"

export const LOCAL_VIDEO = "LOCAL_VIDEO"

export default function useWebRTC(roomUuid: string) {
	const [clients, updateClients] = useStateWithCallback([])
    const socketService = useWebSocket()

	const addNewClient = useCallback(
		(newClient, cb) => {
			updateClients(list => {
				if (!list.includes(newClient)) {
					return [...list, newClient]
				}

				return list
			}, cb)
		},
		[clients, updateClients]
	)

	const peerConnections = useRef<any>({})
	const localMediaStream = useRef<any>(null)
	const peerMediaElements = useRef<any>({
		[LOCAL_VIDEO]: null
	})

	useEffect(() => {
		async function handleNewPeer({peer_id: peerID, create_offer: createOffer}) {
			console.log(peerID, createOffer);
			
			if (peerID in peerConnections.current) {
				return console.warn(`Already connected to peer ${peerID}`)
			}

			peerConnections.current[peerID] = new RTCPeerConnection({
				iceServers: freeice()
			})

			peerConnections.current[peerID].onicecandidate = event => {
				if (event.candidate) {
					console.log("ICE CANDIDATE", event.candidate)
                    socketService.send(OutputMessagesTypes.RELAY_ICE, {
                        peer_id: peerID,
                        ice_candidate: event.candidate
                    })
				}
			}

			let tracksNumber = 0
			peerConnections.current[peerID].ontrack = ({ streams: [remoteStream] }) => {
				tracksNumber++

				if (tracksNumber === 2) {
					// video & audio tracks received
					tracksNumber = 0
					addNewClient(peerID, () => {
						if (peerMediaElements.current[peerID]) {
							peerMediaElements.current[peerID].srcObject = remoteStream
						} else {
							// FIX LONG RENDER IN CASE OF MANY CLIENTS
							let settled = false
							const interval = setInterval(() => {
								if (peerMediaElements.current[peerID]) {
									peerMediaElements.current[peerID].srcObject = remoteStream
									settled = true
								}

								if (settled) {
									clearInterval(interval)
								}
							}, 1000)
						}
					})
				}
			}

			localMediaStream.current.getTracks().forEach(track => {
				peerConnections.current[peerID].addTrack(track, localMediaStream.current)
			})

			if (createOffer) {
				const offer = await peerConnections.current[peerID].createOffer()

				await peerConnections.current[peerID].setLocalDescription(offer)

                socketService.send(OutputMessagesTypes.RELAY_SDP, {
                    peer_id: peerID,
					session_description: offer
                })
			}
		}

		socketService.on(InputMessagesTypes.ADD_PEER, handleNewPeer)

		return () => {
			// socket.off(ACTIONS.ADD_PEER)
		}
	}, [])

	useEffect(() => {
		async function setRemoteMedia({ peer_id: peerID, session_description: remoteDescription }) {
			console.log(peerID, remoteDescription)
			await peerConnections.current[peerID]?.setRemoteDescription(new RTCSessionDescription(remoteDescription))

			if (remoteDescription.type === "offer") {
				const answer = await peerConnections.current[peerID].createAnswer()

				await peerConnections.current[peerID].setLocalDescription(answer)

                socketService.send(OutputMessagesTypes.RELAY_SDP, {
					peer_id: peerID,
					session_description: answer
				})
			}
		}

		socketService.on(InputMessagesTypes.SESSION_DESCRIPTION, setRemoteMedia)

		return () => {
			// socket.off(ACTIONS.SESSION_DESCRIPTION)
		}
	}, [])

	useEffect(() => {
		socketService.on(InputMessagesTypes.ICE_CANDIDATE, ({ peer_id: peerID, ice_candidate: iceCandidate }) => {
			console.log(peerID, peerConnections.current[peerID], iceCandidate)
			peerConnections.current[peerID]?.addIceCandidate(new RTCIceCandidate(iceCandidate))
		})

		return () => {
			// socket.off(ACTIONS.ICE_CANDIDATE)
		}
	}, [])

	useEffect(() => {
		const handleRemovePeer = ({ peer_id: peerID }) => {
			if (peerConnections.current[peerID]) {
				peerConnections.current[peerID].close()
			}

			delete peerConnections.current[peerID]
			delete peerMediaElements.current[peerID]

			updateClients(list => list.filter(c => c !== peerID))
		}

		socketService.on(InputMessagesTypes.REMOVE_PEER, handleRemovePeer)

		return () => {
			// socket.off(ACTIONS.REMOVE_PEER)
		}
	}, [])

	useEffect(() => {
		async function startCapture() {
			localMediaStream.current = await navigator.mediaDevices.getUserMedia({
				audio: true,
				// video: true
				// video: {
				//   width: 1280,
				//   height: 720,
				// }
				// video: {
				//   width: 640,
				//   height: 480,
				// }
				video: {
					width: { ideal: 1920 },
					height: { ideal: 1080 },
					frameRate: { ideal: 30, max: 60 }
				}
			})

			console.log(localMediaStream.current)

			addNewClient(LOCAL_VIDEO, () => {
				const localVideoElement = peerMediaElements.current[LOCAL_VIDEO]

				// Тут будет localVideoElement потому что его установил компонент Room 
				if (localVideoElement) {
					localVideoElement.volume = 0
					localVideoElement.srcObject = localMediaStream.current
				}
			})

			// TODO: Понять зачем он тут
			// socketService.send(OutputMessagesTypes.JOIN, { room_uuid: roomUuid })
		}

		startCapture()
			.catch(e => console.error("Error getting userMedia:", e))

		return () => {
			if (!localMediaStream.current) return
			localMediaStream.current.getTracks().forEach(track => track.stop())

			// TODO: Понять зачем он тут
            // socketService.send(OutputMessagesTypes.LEAVE, null)
		}
	}, [roomUuid])

	const provideMediaRef = useCallback((id, node) => {
		peerMediaElements.current[id] = node
	}, [])

	return {
		clients,
		provideMediaRef
	}
}